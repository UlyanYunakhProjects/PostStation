@page "/games"

@inject NavigationManager NavigationManager
@inject IHttpClientFactory _clientFactory

<a class="btn btn-outline-success" @onclick="ToForm">Добавить</a>

@if (games == null)
{
    <div class="d-flex justify-content-center mt-3">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Загрузка...</span>
        </div>
    </div>
}
else
{
    <div class="d-flex flex-wrap">
        @foreach (Game game in games)
        {
            <div class="p-2 m-2 bg-success text-white rounded d-flex align-items-center">
                <p class="m-0">
                    @game.Name
                    @if (game.Developer != null)
                    {
                        @: | @game.Developer.Name

                    }
                    @if (game.Platform != null)
                    {
                        @: | @game.Platform.Name

                    }
                </p>
                <a class="btn p-1" @onclick="() => ToForm(game.Id)">
                    <i class="bi-pencil text-white"></i>
                </a>
                <a class="btn p-1" @onclick="() => Delete(game.Id)">
                    <i class="bi-x text-white"></i>
                </a>
            </div>
        }
    </div>
}

@code {
    private List<Game> games;

    private async Task UpdateList()
    {
        var client = _clientFactory.CreateClient("poststation");
        var responce = await client.GetAsync("api/games");

        if(responce.IsSuccessStatusCode)
        {
            games = JsonConvert
                .DeserializeObject<List<Game>>(
                    responce.Content.ReadAsStringAsync().Result
                );
        }
    }

    protected override async Task OnInitializedAsync() => await UpdateList();

    private void ToForm() => NavigationManager.NavigateTo("add/games");
    private void ToForm(int id) => NavigationManager.NavigateTo($"edit/games/{id}");
    private async void Delete(int id)
    {
        var client = _clientFactory.CreateClient("poststation");
        var responce = await client.DeleteAsync($"api/games/{id}");

        if(responce.IsSuccessStatusCode)
        {
            await UpdateList();
            this.StateHasChanged();
        }
    }
}